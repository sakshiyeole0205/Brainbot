// File: BrainBotApplication.java
package com.brainbot;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class BrainBotApplication {
    public static void main(String[] args) {
        SpringApplication.run(BrainBotApplication.class, args);
    }
}

// File: controller/ChatController.java
package com.brainbot.controller;

import com.brainbot.service.BrainService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@RestController
@RequestMapping("/api")
@CrossOrigin(origins = "*")
public class ChatController {

    @Autowired
    private BrainService brainService;

    @PostMapping("/ask")
    public Map<String, String> askQuestion(@RequestBody Map<String, String> payload) {
        String question = payload.get("question");
        String answer = brainService.getAnswer(question);
        return Map.of("answer", answer);
    }
}

// File: service/BrainService.java
package com.brainbot.service;

import org.springframework.stereotype.Service;

import java.util.Map;

@Service
public class BrainService {
    private final Map<String, String> cKnowledgeBase = Map.of(
        "what is c programming", "C is a powerful general-purpose programming language created in the 1970s. Itâ€™s known for its speed and efficiency, commonly used in system programming and embedded systems.",
        "pointers", "Pointers are variables that store the address of another variable.\n\nExample:\nint a = 10;\nint *ptr = &a;\nprintf(\"%d\", *ptr); // prints 10",
        "malloc", "malloc() allocates memory dynamically during runtime.\n\nExample:\nint *arr = malloc(5 * sizeof(int));\nif (arr == NULL) printf(\"Memory error\");\nfree(arr);",
        "struct", "A struct is a custom data type that groups variables.\n\nExample:\nstruct Student {\n  char name[50];\n  int age;\n};",
        "function", "Functions are reusable blocks of code.\n\nExample:\nint add(int a, int b) { return a + b; }",
        "loop", "Loops let you run code multiple times:\n- for loop\n- while loop\n- do-while loop",
        "array", "An array holds multiple values of the same type.\n\nint nums[3] = {1, 2, 3};",
        "scanf", "scanf() reads user input.\n\nExample:\nint age;\nscanf(\"%d\", &age);"
    );

    public String getAnswer(String question) {
        String lower = question.toLowerCase();
        for (String key : cKnowledgeBase.keySet()) {
            if (lower.contains(key)) return cKnowledgeBase.get(key);
        }
        return "Sorry, I don't understand. Try asking something about C programming.";
    }
}

// File: resources/application.properties
# Spring Boot default config
server.port=8080
spring.main.allow-bean-definition-overriding=true
spring.mvc.pathmatch.matching-strategy=ANT_PATH_MATCHER

// File: pom.xml
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.brainbot</groupId>
    <artifactId>brainbot-backend</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>
    <name>BrainBot Backend</name>
    <description>Java Spring Boot backend for BrainBot C Assistant</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.7.5</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <java.version>11</java.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>